// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// generator dbml {
//  provider = "prisma-dbml-generator"
// }

generator zod {
  provider      = "zod-prisma"
  output        = "./zod"
  imports       = "./zod-utils"
  relationModel = "default"
}

generator json {
  provider = "prisma-json-types-generator"
}

enum PipelineTriggers {
  responseCreated
  responseUpdated
  responseFinished
}

enum WebhookSource {
  user
  zapier
  make
  n8n
}

model Webhook {
  id            String             @id @default(cuid())
  name          String?
  createdAt     DateTime           @default(now()) @map(name: "created_at")
  updatedAt     DateTime           @updatedAt @map(name: "updated_at")
  url           String
  source        WebhookSource      @default(user)
  environment   Environment        @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  triggers      PipelineTriggers[]
  workflowIds   String[]

  @@index([environmentId])
}

model Attribute {
  id               String         @id @default(cuid())
  createdAt        DateTime       @default(now()) @map(name: "created_at")
  updatedAt        DateTime       @updatedAt @map(name: "updated_at")
  attributeClass   AttributeClass @relation(fields: [attributeClassId], references: [id], onDelete: Cascade)
  attributeClassId String
  person           Person         @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         String
  value            String

  @@unique([attributeClassId, personId])
}

enum AttributeType {
  code
  noCode
  automatic
}

model AttributeClass {
  id               String                    @id @default(cuid())
  createdAt        DateTime                  @default(now()) @map(name: "created_at")
  updatedAt        DateTime                  @updatedAt @map(name: "updated_at")
  name             String
  description      String?
  archived         Boolean                   @default(false)
  type             AttributeType
  environment      Environment               @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId    String
  attributes       Attribute[]
  attributeFilters WorkflowAttributeFilter[]

  @@unique([name, environmentId])
  @@index([environmentId])
}

model Person {
  id            String      @id @default(cuid())
  userId        String      @db.Uuid
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  responses     Response[]
  attributes    Attribute[]
  displays      Display[]
  actions       Action[]

  @@unique([environmentId, userId])
  @@index([environmentId])
}

model Response {
  id               String            @id @default(cuid())
  createdAt        DateTime          @default(now()) @map(name: "created_at")
  updatedAt        DateTime          @updatedAt @map(name: "updated_at")
  finished         Boolean           @default(false)
  workflow         Workflow          @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId       String
  person           Person?           @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId         String?
  notes            ResponseNote[]
  /// @zod.custom(imports.ZResponseData)
  /// [ResponseData]
  data             Json              @default("{}")
  /// @zod.custom(imports.ZResponseTtc)
  /// [ResponseTtc]
  ttc              Json              @default("{}")
  /// @zod.custom(imports.ZResponseMeta)
  /// [ResponseMeta]
  meta             Json              @default("{}")
  tags             TagsOnResponses[]
  /// @zod.custom(imports.ZResponsePersonAttributes)
  /// [ResponsePersonAttributes]
  personAttributes Json?
  // singleUseId, used to prevent multiple responses
  singleUseId      String?

  @@unique([workflowId, singleUseId])
  @@index([workflowId, createdAt])
  @@index([workflowId])
}

model ResponseNote {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @updatedAt @map(name: "updated_at")
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  responseId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String   @db.Uuid
  text       String
  isResolved Boolean  @default(false)
  isEdited   Boolean  @default(false)

  @@index([responseId])
}

model Tag {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now()) @map(name: "created_at")
  updatedAt     DateTime          @updatedAt @map(name: "updated_at")
  name          String
  responses     TagsOnResponses[]
  environmentId String
  environment   Environment       @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([environmentId, name])
  @@index([environmentId])
}

model TagsOnResponses {
  responseId String
  response   Response @relation(fields: [responseId], references: [id], onDelete: Cascade)
  tagId      String
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([responseId, tagId])
  @@index([responseId])
}

enum WorkflowStatus {
  draft
  inProgress
  paused
  completed
}

enum DisplayStatus {
  seen
  responded
}

model Display {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @updatedAt @map(name: "updated_at")
  workflow   Workflow       @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId String
  person     Person?        @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId   String?
  responseId String?        @unique
  status     DisplayStatus?

  @@index([workflowId])
  @@index([personId])
}

model WorkflowTrigger {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  workflow      Workflow    @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId    String
  actionClass   ActionClass @relation(fields: [actionClassId], references: [id], onDelete: Cascade)
  actionClassId String

  @@unique([workflowId, actionClassId])
  @@index([workflowId])
}

enum WorkflowAttributeFilterCondition {
  equals
  notEquals
}

model WorkflowAttributeFilter {
  id               String                           @id @default(cuid())
  createdAt        DateTime                         @default(now()) @map(name: "created_at")
  updatedAt        DateTime                         @updatedAt @map(name: "updated_at")
  attributeClass   AttributeClass                   @relation(fields: [attributeClassId], references: [id], onDelete: Cascade)
  attributeClassId String
  workflow         Workflow                         @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  workflowId       String
  condition        WorkflowAttributeFilterCondition
  value            String

  @@unique([workflowId, attributeClassId])
  @@index([workflowId])
  @@index([attributeClassId])
}

enum WorkflowType {
  email
  link
  mobile
  web
}

enum displayOptions {
  displayOnce
  displayMultiple
  respondMultiple
}

model Workflow {
  id                    String                    @id @default(cuid())
  createdAt             DateTime                  @default(now()) @map(name: "created_at")
  updatedAt             DateTime                  @updatedAt @map(name: "updated_at")
  name                  String
  icon                  String?
  redirectUrl           String?
  type                  WorkflowType              @default(web)
  environment           Environment               @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId         String
  status                WorkflowStatus            @default(draft)
  /// @zod.custom(imports.ZWorkflowWelcomeCard)
  /// [WorkflowWelcomeCard]
  welcomeCard           Json                      @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZWorkflowQuestions)
  /// [WorkflowQuestions]
  questions             Json                      @default("[]")
  /// @zod.custom(imports.ZWorkflowPrompt)
  /// [WorkflowPrompt]
  prompt                Json                      @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZWorkflowThankYouCard)
  /// [WorkflowThankYouCard]
  thankYouCard          Json                      @default("{\"enabled\": false}")
  /// @zod.custom(imports.ZWorkflowHiddenFields)
  /// [WorkflowHiddenFields]
  hiddenFields          Json                      @default("{\"enabled\": false}")
  responses             Response[]
  displayOption         displayOptions            @default(displayOnce)
  recontactDays         Int?
  triggers              WorkflowTrigger[]
  attributeFilters      WorkflowAttributeFilter[]
  displays              Display[]
  autoClose             Int?
  delay                 Int                       @default(0)
  autoComplete          Int?
  closeOnDate           DateTime?
  /// @zod.custom(imports.ZWorkflowClosedMessage)
  /// [WorkflowClosedMessage]
  workflowClosedMessage Json?
  /// @zod.custom(imports.ZWorkflowSingleUse)
  /// [WorkflowSingleUse]

  /// @zod.custom(imports.ZWorkflowProductOverwrites)
  /// [WorkflowProductOverwrites]
  productOverwrites Json?
  /// @zod.custom(imports.ZWorkflowStyling)
  /// [WorkflowStyling]
  styling           Json?
  /// @zod.custom(imports.ZWorkflowSingleUse)
  /// [WorkflowSingleUse]
  singleUse         Json?   @default("{\"enabled\": false, \"isEncrypted\": true}")
  /// @zod.custom(imports.ZWorkflowVerifyEmail)
  /// [WorkflowVerifyEmail]
  verifyEmail       Json?
  pin               String?
  resultShareKey    String? @unique

  @@index([environmentId])
}

enum ActionType {
  code
  noCode
  automatic
}

model ActionClass {
  id            String            @id @default(cuid())
  createdAt     DateTime          @default(now()) @map(name: "created_at")
  updatedAt     DateTime          @updatedAt @map(name: "updated_at")
  name          String
  description   String?
  type          ActionType
  /// @zod.custom(imports.ZActionClassNoCodeConfig)
  /// [ActionClassNoCodeConfig]
  noCodeConfig  Json?
  environment   Environment       @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String
  workflows     WorkflowTrigger[]
  actions       Action[]

  @@unique([name, environmentId])
}

model Action {
  id            String      @id @default(cuid())
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  actionClass   ActionClass @relation(fields: [actionClassId], references: [id], onDelete: Cascade)
  actionClassId String
  person        Person      @relation(fields: [personId], references: [id], onDelete: Cascade)
  personId      String
  /// @zod.custom(imports.ZActionProperties)
  /// @zod.custom(imports.ZActionProperties)
  /// [ActionProperties]
  properties    Json        @default("{}")

  @@index([personId])
  @@index([actionClassId])
}

enum EnvironmentType {
  production
  development
}

enum IntegrationType {
  googleSheets
  notion
  airtable
}

model Integration {
  id            String          @id @default(cuid())
  type          IntegrationType
  environmentId String
  /// @zod.custom(imports.ZIntegrationConfig)
  /// [IntegrationConfig]
  config        Json
  environment   Environment     @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([type, environmentId])
  @@index([environmentId])
}

model Environment {
  id                   String           @id @default(cuid())
  createdAt            DateTime         @default(now()) @map(name: "created_at")
  updatedAt            DateTime         @updatedAt @map(name: "updated_at")
  type                 EnvironmentType
  product              Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId            String
  widgetSetupCompleted Boolean          @default(false)
  workflows            Workflow[]
  people               Person[]
  actionClasses        ActionClass[]
  attributeClasses     AttributeClass[]
  apiKeys              ApiKey[]
  webhooks             Webhook[]
  tags                 Tag[]
  integration          Integration[]

  @@index([productId])
}

enum WidgetPlacement {
  bottomLeft
  bottomRight
  topLeft
  topRight
  center
}

model Product {
  id                    String          @id @default(cuid())
  createdAt             DateTime        @default(now()) @map(name: "created_at")
  updatedAt             DateTime        @updatedAt @map(name: "updated_at")
  name                  String
  team                  Team            @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId                String
  environments          Environment[]
  brandColor            String          @default("#64748b")
  highlightBorderColor  String?
  recontactDays         Int             @default(7)
  linkWorkflowBranding  Boolean         @default(true)
  inAppWorkflowBranding Boolean         @default(true)
  placement             WidgetPlacement @default(bottomRight)
  clickOutsideClose     Boolean         @default(true)
  darkOverlay           Boolean         @default(false)

  @@unique([teamId, name])
  @@index([teamId])
}

model Team {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now()) @map(name: "created_at")
  updatedAt   DateTime     @updatedAt @map(name: "updated_at")
  name        String
  memberships Membership[]
  products    Product[]
  /// @zod.custom(imports.ZTeamBilling)
  /// [TeamBilling]
  billing     Json         @default("{\"stripeCustomerId\": null, \"subscriptionType\": null, \"subscriptionStatus\": \"inactive\", \"nextRenewalDate\": null, \"features\": {\"ai\": {\"status\": \"inactive\", \"responses\": null, \"unlimited\": false, \"openaiApiKey\": null}}}")
  invites     Invite[]
}

enum MembershipRole {
  owner
  admin
  editor
  developer
  viewer
}

model Membership {
  team     Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId   String
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String         @db.Uuid
  accepted Boolean        @default(false)
  role     MembershipRole

  @@id([userId, teamId])
  @@index([userId])
  @@index([teamId])
}

model Invite {
  id         String         @id @default(cuid())
  email      String
  name       String?
  team       Team           @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId     String
  creator    User           @relation("inviteCreatedBy", fields: [creatorId], references: [id])
  creatorId  String         @db.Uuid
  acceptor   User?          @relation("inviteAcceptedBy", fields: [acceptorId], references: [id], onDelete: Cascade)
  acceptorId String?        @db.Uuid
  accepted   Boolean        @default(false)
  createdAt  DateTime       @default(now())
  expiresAt  DateTime
  role       MembershipRole @default(admin)

  @@index([email, teamId])
  @@index([teamId])
}

model ApiKey {
  id            String      @id @unique @default(cuid())
  createdAt     DateTime    @default(now())
  lastUsedAt    DateTime?
  label         String?
  hashedKey     String      @unique()
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  environmentId String

  @@index([environmentId])
}

enum IdentityProvider {
  email
  github
  google
  azuread
}

model Account {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @updatedAt @map(name: "updated_at")
  user              User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  access_token      String?  @db.Text
  refresh_token     String?  @db.Text
  expires_at        Int?
  ext_expires_in    Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
  @@index([userId])
}

enum Role {
  marketing_specialist
  sales_manager
  startup_founder
  customer_support_specialist
  virtual_assistant
  agency_coordinator
  human_resources_manager
  other
}

enum Objective {
  enhance_online_presence
  boost_engagement_and_conversion
  optimize_content_and_seo_strategy
  improve_business_strategy
  innovate_and_develop
  improve_customer_and_employee_experience
  streamline_operations_and_sales
  other
}

enum Intention {
  workflow_user_segments
  workflow_at_specific_point_in_user_journey
  enrich_customer_profiles
  collect_all_user_feedback_on_one_platform
  other
}

model User {
  id                        String           @id @db.Uuid
  createdAt                 DateTime         @default(now()) @map(name: "created_at")
  updatedAt                 DateTime         @updatedAt @map(name: "updated_at")
  name                      String?
  email                     String           @unique
  emailVerified             DateTime?        @map(name: "email_verified")
  imageUrl                  String?
  twoFactorSecret           String?
  twoFactorEnabled          Boolean          @default(false)
  backupCodes               String?
  onboardingCompleted       Boolean          @default(false)
  identityProvider          IdentityProvider @default(email)
  identityProviderAccountId String?
  memberships               Membership[]
  accounts                  Account[]
  responseNotes             ResponseNote[]
  groupId                   String?
  invitesCreated            Invite[]         @relation("inviteCreatedBy")
  invitesAccepted           Invite[]         @relation("inviteAcceptedBy")
  role                      Role?
  objective                 Objective?
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// @zod.custom(imports.ZUserNotificationSettings)
  /// [UserNotificationSettings]
  notificationSettings      Json             @default("{}")

  @@index([email])
}

model ShortUrl {
  id        String   @id
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  url       String   @unique
}
